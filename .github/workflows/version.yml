name: increment_version
on:
  push:
    branches:
      - main

jobs:
  update-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        
      - name: Checkout target repository
        uses: actions/checkout@v4
        with:
          repository: airdata/docker-jenkins-stack  # Replace with target repository
          token: ${{ secrets.PAT_TOKEN }}
          path: docker-jenkins-stack
      
      - name: Update version number
        run: |
          python -c '
          import os
          import re

          file_path = "docker-jenkins-stack/jenkins-master/Dockerfile"
          
          def increment_version(version):
              # Split version into parts
              parts = version.split(".")
              
              # Convert last part to integer and increment
              if len(parts) > 0:
                  parts[-1] = str(int(parts[-1]) + 1)
              
              # Join back together
              return ".".join(parts)
          
          # Read the Dockerfile
          with open(file_path, "r") as file:
              content = file.read()
          
          # Find current version using regex
          match = re.search(r"FROM airdata/jenkins-master-docker:(\d+\.?\d*\.?\d*)", content)
          if match:
              current_version = match.group(1)
              new_version = increment_version(current_version)
              
              # Update the file
              new_content = content.replace(
                  f"FROM airdata/jenkins-master-docker:{current_version}",
                  f"FROM airdata/jenkins-master-docker:{new_version}"
              )
              
              # Write back to file
              with open(file_path, "w") as file:
                  file.write(new_content)
                  
              # Output the versions for use in later steps
              with open(os.environ["GITHUB_OUTPUT"], "a") as f:
                  print(f"new_version={new_version}", file=f)
                  print(f"old_version={current_version}", file=f)
          else:
              print("Error: Could not find Alpine version in Dockerfile")
              exit(1)
          '

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          commit-message: "Increment version to ${{ steps.version.outputs.new_version }}"
          title: "⬆️ Bump: Version to ${{ steps.version.outputs.new_version }}"
          body: |
            Automated version increment:
            - Previous version: ${{ steps.version.outputs.old_version }}
            - New version: ${{ steps.version.outputs.new_version }}
            
            This PR was automatically generated by GitHub Actions.
          branch: bump-version
          base: main
          delete-branch: true

